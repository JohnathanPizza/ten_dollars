; BRK_DATA_LOAD
; P --- VR4/1: data page ID P
; R --- VR11/1: success bool S
; load data page P into the process' DAP
; if S = TRUE then the page was loaded
; if S = FALSE then the page was not loaded

>BRK_DATA_LOAD
	; writeback for current DAP
	LDY	PROC_ACTIVE_ID		; load proc ID
	LDA.Y	PROC_ACTIVE_DAP_ID	; get DAP ID
	JSR	PAGE_TABLE_GET_DATA	; try to find its page
	CMP.I	PAGE_COUNT_TOTAL	; test if page count
	BEQ	_BRK_DATA_LOAD_SKIP	; skip writeback if not found
	JSR	PAGE_MAP_FIND		; get map idx
	JSR	PAGE_STORE_DAP		; store DAP to memory
>_BRK_DATA_LOAD_SKIP
	LDA.Z	VR4			; get new data page ID from P
	JSR	PAGE_TABLE_GET_DATA	; try to to find its page
	CMP.I	PAGE_COUNT_TOTAL	; test if actually found
	BEQ	_BRK_DATA_LOAD_FAIL	; fail if not found
	JSR	PAGE_MAP_FIND		; get map idx
	JSR	PAGE_LOAD_DAP		; load DAP
	LDA.Z	VR4			; load page ID from P
	STA.Y	PROC_ACTIVE_DAP_ID	; store in DAP ID
	LDA.I	TRUE			; load success value
	STA.Z	VR11			; store in S
	JMP	PROC_UNPAUSE		; return to proc
>_BRK_DATA_LOAD_FAIL
	LDA.I	0X80			; set active DAP ID null
	STA.Y	PROC_ACTIVE_DAP_ID	; update DAP ID
	LDA.I	FALSE			; load fail value
	STA.Z	VR11			; store in S
	JMP	PROC_UNPAUSE		; return to proc
