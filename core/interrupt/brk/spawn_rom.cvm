; BRK_SPAWN_ROM
; P --- VR4/1: ROM program code C
; R --- VR11/1: new process ID N
; tries to spawn a new ROM program from code C
; each program stored in ROM has a unique code to use
; if N = 0xFF then no process could be used for the program
; otherwise N = the new child process ID with this process as the parent

>BRK_SPAWN_ROM
	LDA.I	0XFF			; load error return value
	STA.Z	VR11			; store in N
	LDA.Z	VR4			; load C
	CMP.I	ROM_PROGRAM_COUNT	; test if not valid
	BGE	_BRK_SPAWN_ROM_END	; end if not valid
	JSR	PROC_GET		; get open process ID
	CMP.I	PROC_COUNT		; test if failed
	BEQ	_BRK_SPAWN_ROM_END	; just return if no process open
	STA.Z	VR11			; store new process ID in N
	TAY				; move new process ID to Y
	LDA.Z	VR4			; load C
	STA.Y	PROC_A			; store in process A register
	LDA	PROC_ACTIVE_ID		; load parent process ID
	STA.Y	PROC_PARENT		; store parent
	LDA.I	PROC_STATE_INIT_ROM	; load INIT_ROM state
	STA.Y	PROC_STATE		; store in process state
	LDA.I	1			; load 1 for low priority
	STA.Y	PROC_SCHEDULE_PRIORITY	; store in process priority
	LDA.I	0			; load 0 to reset schedule counter
	STA.Y	PROC_SCHEDULE_COUNT	; reset counter
>_BRK_SPAWN_ROM_END
	JMP	PROC_UNPAUSE		; return to process
