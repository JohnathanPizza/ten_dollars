; tries to spawn a new rom process with given code in vr4/1
; returns proc id in vr11/1
; if 0xff then no proc spawned

>BRK_SPAWN_ROM
	LDA.I	0XFF			; load error return value
	STA.Z	VR11			; store in VR11/1
	LDA.Z	VR4			; load rom proc number
	CMP.I	ROM_PROGRAM_COUNT	; test if not valid
	BGE	_BRK_SPAWN_ROM_END	; end if not valid
	JSR	PROC_GET		; get open process id
	CMP.I	PROC_COUNT		; test if failed
	BEQ	_BRK_SPAWN_ROM_END	; just return if no process open
	STA.Z	VR11			; store proc id in return
	TAY				; move good proc id to Y
	LDA.Z	VR4			; load program id
	STA.Y	PROC_A			; store in process A register
	LDA	PROC_ACTIVE_ID		; load parent process id
	STA.Y	PROC_PARENT		; store parent
	LDA.I	PROC_STATE_INIT_ROM	; load init rom state
	STA.Y	PROC_STATE		; store in proc state
	LDA.I	1			; load 1 for low priority
	STA.Y	PROC_SCHEDULE_PRIORITY	; store in process priority
	LDA.I	0			; load 0 to reset schedule counter
	STA.Y	PROC_SCHEDULE_COUNT	; reset counter
>_BRK_SPAWN_ROM_END
	JMP	PROC_UNPAUSE		; return to proc
