; P --- VR0: string pointer S
;	VR5: string length L
; adds L characters from string S to the IO write buffer
; also starts the writing operation if not happening already

>BRK_WRITE
	LDA.Z	VR5			; load low byte of length
	ORA.Z	VR5 1			; OR with high byte to test for 0
	BNE	_BRK_WRITE_CONT		; if 0 length then just return
	RTS
>_BRK_WRITE_CONT
	JSR	HW_ENABLE_VIA		; enable VIA to turn on the interrupt
	LDA.I	VIA_IER_ENABLE VIA_IB_CB1	; load constant to enable CB1
	STA	VIA_IER			; enable
	JSR	HW_DISABLE_VIA		; disable VIA since done with it now

	LDA.I	TRUE			; load TRUE value to indicate writing status active
	STA	IO_WRITE_STATUS		; store

	LDA.Z	VR0			; copy string pointer out
	STA	IO_WRITE_PTR
	LDA.Z	VR0 1
	STA	IO_WRITE_PTR 1
	LDA.Z	VR5			; copy string length out
	STA	IO_WRITE_LEN
	LDA.Z	VR5 1
	STA	IO_WRITE_LEN 1

>_BRK_WRITE_LOOP
	LDA	IO_WRITE_BUFFER_HEAD	; load head index
	INC				; increment by 1
	CMP	IO_WRITE_BUFFER_TAIL	; compare head + 1 to tail
	BEQ	_BRK_WRITE_LOOP_END	; if head + 1 = tail then there is no room, just return

	LDA.Z	VR5			; load low byte
	ORA.Z	VR5 1			; OR with high byte for 0 test
	BEQ	_BRK_WRITE_LOOP_END	; if 0 then nothing left to add, return

	LDA.ZP	VR0			; load next character from the string
	LDY	IO_WRITE_BUFFER_HEAD	; load head index
	STA.Y	IO_WRITE_BUFFER		; write character into buffer at head index
	INC	IO_WRITE_BUFFER_HEAD	; increment head index

	LDX.I	VRI_0			; load VRI for pointer
	JSR	INC16			; inc pointer

	LDX.I	VRI_5			; load VRI for length
	JSR	DEC16			; dec length

	BRA	_BRK_WRITE_LOOP		; loop
>_BRK_WRITE_LOOP_END
	LDA.Z	VR0			; old values for VR0 and VR5 went into IO_WRITE_PTR and IO_WRITE_LEN earlier, need to swap them now
	LDX	IO_WRITE_PTR
	STX.Z	VR0
	STA	IO_WRITE_PTR
	LDA.Z	VR0 1
	LDX	IO_WRITE_PTR 1
	STX.Z	VR0 1
	STA	IO_WRITE_PTR 1
	LDA.Z	VR5
	LDX	IO_WRITE_LEN
	STX.Z	VR5
	STA	IO_WRITE_LEN
	LDA.Z	VR5 1
	LDX	IO_WRITE_LEN 1
	STX.Z	VR5 1
	STA	IO_WRITE_LEN 1
	RTS				; return
