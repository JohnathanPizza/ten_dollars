; tries to complete a process' reading operation from BRK_READ once it has read focus
; if no data is ready to be read in the read buffer then this process stays suspended

>SERVICE_IO_READ
	; check if this process has focus
	LDA	IO_READ_FOCUS		; load focus process ID
	CMP	PROC_ACTIVE_ID		; compare to current process ID
	BNE	_SERVICE_IO_READ_FAIL	; if not focused then fail and keep suspended
	LDA	IO_READ_VALID		; load valid status
	BEQ	_SERVICE_IO_READ_FAIL	; if valid status = 0 then no data, keep suspended
	DEC	IO_READ_STATUS		; good to read, decrement read status semaphore
	STZ	IO_READ_VALID		; clear valid status since it is being consumed
	JSR	PROC_LOAD		; load in all process resources to get access to VR0 and VR4/1
	LDX.Z	VR4			; load length of buffer into X
	LDY.I	0			; set buffer index to 0
>_SERVICE_IO_READ_LOOP
	LDA.Y	IO_READ_BUFFER		; load next character from read buffer
	STA.ZPY	VR0			; store into process buffer at index Y
	BEQ	_SERVICE_IO_READ_LOOP_END	; if stored the null char then exit loop
	INY				; inc buffer idx
	DEX				; dec buffer remaining len
>_SERVICE_IO_READ_CHECK
	CPX.I	0			; check if remaining buffer length is 0
	BNE	_SERVICE_IO_READ_LOOP	; if space left keep looping
>_SERVICE_IO_READ_LOOP_END
	LDA.I	0			; load 0 for null char value
	LDY.Z	VR4			; load length of buffer in Y
	DEY				; set index to very last position in buffer
	STA.ZPY	VR0			; store null char
	JSR	PROC_LEAVE		; save process
	LDA.I	PROC_STATE_READY	; load ready state
	LDY	PROC_ACTIVE_ID		; load process ID
	STA.Y	PROC_STATE		; update process state
>_SERVICE_IO_READ_FAIL
	JMP	SERVICE_CYCLE_BEGIN	; start new cycle
