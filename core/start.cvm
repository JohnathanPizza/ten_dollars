; entrypoint in intitialization code when the computer is turned on or reset

@0X8000
>START
	; hardware initialization
	
	; setting stack pointer
	LDX.I	0XFF	; load stack pointer default value
	TXS		; set stack pointer to 0x1FF

	; turning on hardware modules
	STA	HW_ENABLE_ADDR HW_SRAM HW_VIA	; enable the SRAM and VIA
	LDA.I	HW_SRAM		; load the value of the SRAM toggle (not VIA, it is turned off soon)
	STA	HW_STATUS	; store into status to track it

	; setting register values in the VIA
	LDA.I	0B11000101	; initial value for the PCR
	STA	VIA_PCR		; update PCR
	STZ	VIA_READ_PORT_DIR	; set the reading port to all input
	STZ	VIA_WRITE_PORT		; preset the write port to output 0
	LDA.I	0XFF			; load value to set write port to all output
	STA	VIA_WRITE_PORT_DIR	; set write port to all output
	LDA.I	0B00000000
	STA	VIA_ACR
	STA	HW_ENABLE_ADDR HW_SRAM	; disable the VIA now

	; initialize RAM variables
	STZ	IO_WRITE_BUFFER_HEAD
	STZ	IO_WRITE_BUFFER_TAIL
	STZ	IO_WRITE_LEN
	STZ	IO_WRITE_LEN 1
	STZ	IO_WRITE_STATUS
	STZ	IO_READ_IDX
	STZ	IO_READ_STATUS
	STZ	IO_KEYBOARD_SHIFT
	STZ	IO_KEYBOARD_FLAGS

	; initialize page variables
	LDA.I	0XFF
	STA	PAGE_TABLE_EMPTY
	
	LDA.I	PAGE_TABLE_PROCID
	STA.Z	VR0
	LDA.I	PAGE_TABLE_PROCID > 8
	STA.Z	VR0 1
	LDA.I	0XFF
	STA.Z	VR4
	STZ.Z	VR4 1
	STA.Z	VR5
	JSR	MEMSET

	LDA.I	PAGE_MAP
	STA.Z	VR0
	LDA.I	PAGE_MAP > 8
	STA.Z	VR0 1
	JSR	MEMSET

	LDA.I	0XFF
	STA	PROC_ACTIVE_ID
	STZ	PROC_ARRAY_ALIVE
	STZ	PROC_ARRAY_ALIVE 1

	; init finished

	CLI

	LDA.I	ASCII_ESC
	JSR	PRINTC
	LDA.I	ASCII_AT
	JSR	PRINTC

	LDA.I	0B11101001
	STA	0X3000
	LDA.I	0B00110001
	STA	0X3001
	LDA.I	0B10100010
	STA	0X3002

	LDA.I	0X3000
	STA.Z	VR0
	LDA.I	0X3000 > 8
	STA.Z	VR0 1

	LDA.I	2
	STA	VR4
	JSR	BITARRAY_SET

	LDA.I	3
	STA	VR4
	JSR	BITARRAY_CLEAR

	LDX.I	0
>BITARRAY_LOOP
	STX.Z	VR4
	JSR	BITARRAY_GET
	JSR	PRINTB
	JSR	PRINTL
	INX
	CPX.I	0X18
	BNE	BITARRAY_LOOP



>LOOP
	JMP LOOP

>PPT
	LDX.I	0
>_PPT_LOOP
	TXA
	JSR	PRINTB
	LDA.I	ASCII_SPACE
	JSR	PRINTC
	LDA.X	PAGE_TABLE_PROCID
	JSR	PRINTB
	LDA.X	PAGE_TABLE_HOME
	JSR	PRINTB
	JSR	PRINTL
	INX
	CPX.I	0x10
	BNE	_PPT_LOOP
	JSR	WRITE_FLUSH
	RTS

>WRITE_FLUSH
	LDA	IO_WRITE_STATUS
	BNE	WRITE_FLUSH
	RTS
