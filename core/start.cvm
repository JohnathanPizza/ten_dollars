; entrypoint in intitialization code when the computer is turned on or reset

@0X8000
>START
	; hardware initialization
	
	; setting stack pointer
	LDX.I	0XFF	; load stack pointer default value
	TXS		; set stack pointer to 0x1FF

	; turning on hardware modules
	STA	HW_ENABLE_ADDR HW_RAM1 HW_VIA	; enable RAM1 and VIA

	; setting register values in the VIA
	LDA.I	0B11000101		; initial value for the PCR
	STA	VIA_PCR			; update PCR
	STZ	VIA_READ_PORT_DIR	; set the reading port to all input
	STZ	VIA_WRITE_PORT		; preset the write port to output 0
	LDA.I	0XFF			; load value to set write port to all output
	STA	VIA_WRITE_PORT_DIR	; set write port to all output
	LDA.I	0B00000000		; load initial ACR value
	STA	VIA_ACR			; store into ACR
	LDA.I	VIA_IER_ENABLE VIA_IB_CA1	; enable keyboard at start since it will always be on
	STA	VIA_IER			; enable
	BIT	VIA_READ_PORT		; clear any random possible interrupt quickly
	STA	HW_ENABLE_ADDR HW_RAM1	; disable VIA since setup is done

	; initialize RAM variables

	; zero everything from 0X200 to 0XFFF
	STZ.Z	VR0
	LDA.I	0X2
	STA.Z	VR0 1
	STZ.Z	VR4
	LDA.I	0XE
	STA.Z	VR4 1
	STZ.Z	VR5
	JSR	MEMSET			; clear 0x200 to 0xFFF
	
	LDA.I	PAGE_TABLE_PROCID	; set page procids to 0xFF
	STA.Z	VR0
	LDA.I	PAGE_TABLE_PROCID > 8
	STA.Z	VR0 1
	LDA.I	PAGE_COUNT_TOTAL
	STA.Z	VR4
	STZ.Z	VR4 1
	LDA.I	0XFF
	STA.Z	VR5
	JSR	MEMSET

	LDA.I	PAGE_MAP		; set map values to 0xFF
	STA.Z	VR0
	LDA.I	PAGE_MAP > 8
	STA.Z	VR0 1
	LDA.I	0XFF
	STA.Z	VR5
	JSR	MEMSET

	LDA.I	0XFF
	STA	PROC_ACTIVE_ID		; no proc active id at first
	STA	IO_WRITE_CLAIM		; clear write claim
	LDA.I	0
	STA	IO_READ_FOCUS		; start with proc 0 focused

	; init finished

	CLI				; interrupts on

	LDA.I	ASCII_ESC		; print ESC and @ to initialize printer
	JSR	PRINTC
	LDA.I	ASCII_AT
	JSR	PRINTC
	LDA.I	ASCII_EXCLAIMATION	; print !!\n to let user know code started running
	JSR	PRINTC
	JSR	PRINTC
	JSR	PRINTL

	JSR	FLOPPY_FORMAT
	LDA.I	0
	STA.Z	VR4
	LDA.I	1
	STA.Z	VR4 1
	LDA.I	1 ; t
	STA	FLOPPY_SEC_PTR
	LDA.I	5 ; s
	STA	FLOPPY_SEC_PTR 1
	LDA.I	5
	STA	FLOPPY_SEC_LEN
	LDA.I	ASCII_H
	STA	FLOPPY_PAGE
	LDA.I	ASCII_EL
	STA	FLOPPY_PAGE 1
	LDA.I	ASCII_LL
	STA	FLOPPY_PAGE 2
	LDA.I	ASCII_LL
	STA	FLOPPY_PAGE 3
	LDA.I	ASCII_OL
	STA	FLOPPY_PAGE 4
	LDA.I	0
	STA	FLOPPY_PAGE 5
	JSR	FLOPPY_WRITE
	LDA.I	0
	STA	FLOPPY_SEC_PTR
	STA	FLOPPY_SEC_PTR 1
	LDA.I	ASCII_WL
	STA	FLOPPY_PAGE
	LDA.I	ASCII_OL
	STA	FLOPPY_PAGE 1
	LDA.I	ASCII_RL
	STA	FLOPPY_PAGE 2
	LDA.I	ASCII_LL
	STA	FLOPPY_PAGE 3
	LDA.I	ASCII_DL
	STA	FLOPPY_PAGE 4
	LDA.I	0
	STA	FLOPPY_PAGE 5
	LDA.I	1
	STA	VR4
	LDA.I	5
	STA	VR4 1
	JSR	FLOPPY_WRITE

	LDA.I	0
	STA	VR4
	LDA.I	1
	STA	VR4 1
	JSR	FLOPPY_READ
	
	LDA	FLOPPY_SEC_LEN
	JSR	PRINTB
	JSR	PRINTL

	LDA	FLOPPY_SEC_PTR
	JSR	PRINTB
	LDA	FLOPPY_SEC_PTR 1
	JSR	PRINTB
	JSR	PRINTL
	
	LDA	FLOPPY_PAGE 0
	JSR	PRINTB
	LDA	FLOPPY_PAGE 1
	JSR	PRINTB
	LDA	FLOPPY_PAGE 2
	JSR	PRINTB
	LDA	FLOPPY_PAGE 3
	JSR	PRINTB
	LDA	FLOPPY_PAGE 4
	JSR	PRINTB
	JSR	PRINTL

	LDA	FLOPPY_SEC_PTR
	STA.Z	VR4
	LDA	FLOPPY_SEC_PTR 1
	STA.Z	VR4 1
	JSR	FLOPPY_READ
	
	LDA	FLOPPY_SEC_LEN
	JSR	PRINTB
	JSR	PRINTL

	LDA	FLOPPY_SEC_PTR
	JSR	PRINTB
	LDA	FLOPPY_SEC_PTR 1
	JSR	PRINTB
	JSR	PRINTL
	
	LDA	FLOPPY_PAGE 0
	JSR	PRINTB
	LDA	FLOPPY_PAGE 1
	JSR	PRINTB
	LDA	FLOPPY_PAGE 2
	JSR	PRINTB
	LDA	FLOPPY_PAGE 3
	JSR	PRINTB
	LDA	FLOPPY_PAGE 4
	JSR	PRINTB
	JSR	PRINTL
	
	JSR	PRINTWAIT

	;LDA.I	0			; load shell program code
	;JSR	LOADROM			; start a shell program in proc 0
	
	JMP	SERVICE_CYCLE_BEGIN	; start the very first service cycle
