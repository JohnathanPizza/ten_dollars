; CHARACTER.CVM
; ===
; ISUPPER
; ISLOWER
; TOUPPER
; TOLOWER
; TOHEX

;==================================================

; ISUPPER
; P --- A: character C
; R --- A: result B
; returns a TRUE boolean B if C is an uppercase letter
; otherwise B is FLASE

>ISUPPER
	CLC			; clc for adc
	ADC.I	255 - ASCII_Z	; move A-Z range to 230-255
	CMP.I	230		; see if C is in the range
	ROL			; move carry bit / previous comparison result into bit 0
	AND.I	1		; mask it
	RTS			; return

;==================================================

; ISLOWER
; P --- A: character C
; R --- A: result B
; returns a TRUE boolean B if C is a lowercase letter
; otherwise B is FALSE

>ISLOWER
	CLC			; clc for adc
	ADC.I	255 - ASCII_ZL	; move a-z range to 230-255
	CMP.I	230		; see if C is in the range
	ROL			; move carry bit / previous comparison result into bit 0
	AND.I	1		; mask it
	RTS			; return

;==================================================

; TOUPPER
; P --- A: character C
; R --- A: uppercase character U
; converts C into its uppercase letter equivalent U

>TOUPPER
	PHA			; store A
	JSR	ISLOWER		; get case of C
	CMP.I	FALSE		; test if not lowercase
	BEQ	_TOUPPER_SAME	; if not then just return C
	PLA			; restore A
	CLC			; clc for adc
	ADC.I	ASCII_A - ASCII_AL	; add constant to convert C to uppercase
	RTS			; return
>_TOUPPER_SAME
	PLA			; restore A
	RTS			; return

;==================================================
	
; TOLOWER
; P --- A: character C
; R --- A: lowercase character L
; converts C into its lowercase letter equivalent L

>TOLOWER
	PHA			; store A
	JSR	ISUPPER		; get case of C
	CMP.I	FALSE		; test if not uppercase
	BEQ	_TOLOWER_SAME	; if not then just return C
	PLA			; restore A
	CLC			; clc for adc
	ADC.I	ASCII_AL - ASCII_A	; add constant to convert C to lowercase
	RTS			; return
>_TOLOWER_SAME
	PLA			; restore A
	RTS			; return

;==================================================

; TOHEX
; P --- A: byte B
; R --- A: hex character C
; converts the LOW NYBBLE of B into its hex character equivalent

>TOHEX
	AND.I	0XF		; mask low nybble
	CMP.I	10		; test if >= 10
	BCS	_TOHEX_ALPHA	; if so then do alphabetical computation
	CLC			; clc for adc
	ADC.I	ASCII_0		; add ASCII_0 to convert 0-9 value to ASCII number
	RTS			; return
>_TOHEX_ALPHA
	CLC			; clc for adc
	ADC.I	ASCII_A - 10	; subtract 10 then add ASCII_A to convert to alphabetical hex
	RTS			; return
