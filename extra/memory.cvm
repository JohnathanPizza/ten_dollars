; MEMORY.CVM
; ===
; MEMSET
; MEMCPY
; PAGESET
; PAGECPY
; PAGESWAP

;=========================================

; MEMSET
; P --- VR0: pointer to memory P
;	VR4: length of memory L
;	VR5/1: value V
; sets the first L bytes at P to V

>MEMSET
	PHA			; store A
	PHX			; store X
	LDA.Z	VR0		; copy P to VR8
	STA.Z	VR8
	LDA.Z	VR0 1
	STA.Z	VR8 1
	LDA.Z	VR4		; copy L to VR9
	STA.Z	VR9
	LDA.Z	VR4 1
	STA.Z	VR9 1

	BRA	_MEMSET_LOOP_CHECK	; enter loop
>_MEMSET_LOOP
	LDA.Z	VR5		; load V
	STA.ZP	VR8		; set next byte at P to V
	JSR	INC8		; increment P
	JSR	DEC9		; decrement L
>_MEMSET_LOOP_CHECK
	LDA.Z	VR9		; test if L is 0
	ORA.Z	VR9 1
	BNE	_MEMSET_LOOP	; if not 0 loop again
>_MEMSET_LOOP_END
	PLX			; restore X
	PLA			; restore A
	RTS			; return

;==================================================

; MEMCPY
; P --- VR0: pointer to source memory S
;	VR1: pointer to destination memory D
;	VR4: length of source memory L
; copies the first L bytes from S to D

>MEMCPY
	PHA			; store A
	PHX			; store X
	LDA.Z	VR0		; copy S to VR8
	STA.Z	VR8
	LDA.Z	VR0 1
	STA.Z	VR8 1
	LDA.Z	VR1		; copy D to VR9
	STA.Z	VR9
	LDA.Z	VR1 1
	STA.Z	VR9 1
	LDA.Z	VR4		; copy L to VR10
	STA.Z	VR10
	LDA.Z	VR4 1
	STA.Z	VR10 1

	BRA	_MEMCPY_LOOP_CHECK	;  enter loop
>_MEMCPY_LOOP
	LDA.ZP	VR8		; load next byte from S
	STA.ZP	VR9		; store at next byte in D
	JSR	INC8		; increment S
	JSR	INC9		; increment D
	JSR	DEC10		; decrement L
>_MEMCPY_LOOP_CHECK
	LDA.Z	VR10		; test if L is 0
	ORA.Z	VR10 1
	BNE	_MEMCPY_LOOP	; if not 0 loop again
>_MEMCPY_LOOP_END
	PLX			; restore X
	PLA			; restore A
	RTS			; return

;==================================================

; PAGESET
; P --- VR0/2: page number P
;	VR5/1: value V
; sets every byte in page P to V

>PAGESET
	PHA			; store A
	PHY			; store Y
	LDA.Z	VR0		; save VR0/1 to stack
	PHA

	STZ.Z	VR0		; make VR0 a pointer to the beginning of page P
	LDY.I	0		; set index to 0
	LDA.Z	VR5		; load value to store
>_PAGESET_LOOP
	STA.ZPY	VR0		; store value at index
	INY			; increment index
	BNE	_PAGESET_LOOP	; loop if not 0 again

	PLA			; restore VR0/1
	STA.Z	VR0
	PLY			; restore Y
	PLA			; restore A
	RTS			; return

;==================================================

; PAGECPY
; P --- VR0/2: source page number S
;	VR1/2: destination page number D
; copies every byte in page S to page D

>PAGECPY
	PHA			; store A
	PHY			; store Y
	LDA.Z	VR0		; save VR0/1 to stack
	PHA
	LDA.Z	VR1		; save VR1/1 to stack
	PHA

	STZ.Z	VR0		; make VR0 a pointer to the beginning of page S
	STZ.Z	VR1		; make VR1 a pointer to the beginning of page D
	LDY.I	0		; set index to 0
>_PAGECPY_LOOP
	LDA.ZPY	VR0		; get value in S at index
	STA.ZPY	VR1		; store into D at index
	INY			; increment index
	BNE	_PAGECPY_LOOP	; loop if not 0 again

	PLA			; restore VR1/1
	STA.Z	VR1
	PLA			; restore VR0/1
	STA.Z	VR0
	PLY			; restore Y
	PLA			; restore A
	RTS			; return

;==================================================

; PAGESWAP
; P --- VR0/2: page 1 number A
;	VR1/2: page 2 number B
; swaps the value of every byte in pages A and B

>PAGESWAP
	PHA			; store A
	PHY			; store Y
	LDA.Z	VR0		; save VR0/1 to stack
	PHA
	LDA.Z	VR1		; save VR1/1 to stack
	PHA

	STZ.Z	VR0		; make VR0 a pointer to the beginning of page A
	STZ.Z	VR1		; make VR1 a pointer to the beginning of page B
	LDY.I	0		; set index to 0
>_PAGESWAP_LOOP
	LDA.ZPY	VR0		; load value at index from A
	PHA			; store it on the stack
	LDA.ZPY	VR1		; load value at index from B
	STA.ZPY VR0		; store B value in A at index
	PLA			; get A value off stack
	STA.ZPY VR1		; store A value in B at index
	INY			; increment index
	BNE	_PAGESWAP_LOOP	; loop again if not 0

	PLA			; restore VR1/1
	STA.Z	VR1
	PLA			; restore VR0/1
	STA.Z	VR0
	PLY			; restore Y
	PLA			; restore A
	RTS			; return
