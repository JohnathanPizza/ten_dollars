; PRINT.CVM
; ===
; PRINTS
; PRINTC
; PRINTB
; PRINTL
; PRINTWAIT

;==================================================

; PRINTS
; P --- VR0: string pointer S
; calls the write BRK function to write out S over IO
; must be nul character delimited

>PRINTS
	PHA			; store A
	LDA.Z	VR0		; copy out VR0
	PHA
	LDA.Z	VR0 1
	PHA
>_PRINTS_LOOP
	LDA.I	BC_WRITES
	BRK			; call WRITES
	LDA.Z	VR0		; add the number of chars written to pointer S
	CLC
	ADC.Z	VR11
	STA.Z	VR0
	LDA.Z	VR0 1
	ADC.I	0
	STA.Z	VR0 1
	LDA.ZP	VR0		; load character from the new pointer
	BNE	_PRINTS_LOOP	; if not the nul char, not at string end, print again
	PLA			; copy back VR0
	STA.Z	VR0 1
	PLA
	STA.Z	VR0
	PLA			; restore A
	RTS			; return

;==================================================

; PRINTC
; P --- A: character C
; writes character C to the print buffer

>PRINTC
	PHX			; store X
	LDX.Z	VR4		; store VR4/1 in X
	STA.Z	VR4		; store C in VR4/1
>_PRINTC_LOOP
	LDA.I	BC_WRITEC	; load WRITEC brk code
	BRK			; call WRITEC
	LDA.Z	VR11		; load return value
	BEQ	_PRINTC_LOOP	; if returned false try again
	LDA.Z	VR4		; load C
	STX.Z	VR4		; restore VR4/1 from X
	PLX			; restore X
	RTS			; return

;==================================================

; PRINTB
; P --- A: byte B
; writes the hexadecimal representation of B to the print buffer

>PRINTB
	PHA			; store A
	ROR			; shift high nybble into low nybble
	ROR
	ROR
	ROR
	JSR	TOHEX		; get hex character for high nybble
	JSR	PRINTC		; print it
	PLA			; reload A
	PHA			; store A
	JSR	TOHEX		; get hex character for low nybble
	JSR	PRINTC		; print it
	PLA			; restore B
	RTS			; return

;==================================================

; PRINTL
; writes the newline character to the print buffer

>PRINTL
	PHA			; store A
	LDA.I	ASCII_LF	; load newline
	JSR	PRINTC		; print newline
	PLA			; restore A
	RTS			; return

;==================================================

; PRINTWAIT
; returns when the print buffer is clear

>PRINTWAIT
	LDA	IO_WRITE_STATUS	; load write status
	BNE	PRINTWAIT	; if not 0 then loop
	RTS			; return
