; STANDARD.CVM
; ===
; PROGRAM_GET_ARG

;==================================================

; PROGRAM_GET_ARG
; P --- VR10: argument pointer A
;	VR11/1: argument length L
; R --- VR10: new argument pointer NA
;	VR11/1: new argument length NL
;	A: success value V
; sets NA to the beginning of the next argument given in an input string
; also sets NL to the string length of this next argument within the input string
; V = FALSE if no other arguments were found in the input string
; V = TRUE if another agument was found, A and L are valid
; to start parsing the input string, set L to 0 and A to the beginning of the string input
; subsequent calls return the next and next arguments in the string
; do not change A or L if other arguments will be searched for

>PROGRAM_GET_ARG
	CLC				; add previous L to A to get 1 past end of prev arg
	LDA.Z	VR10			; load low byte of A
	ADC.Z	VR11			; add with L
	STA.Z	VR10			; store in low byte
	LDA.Z	VR10 1			; load high byte of A
	ADC.I	0			; add carry
	STA.Z	VR10 1			; store in high byte
	STZ.Z	VR11			; set NL to 0
>_PROGRAM_GET_ARG_TRIM
	LDA.ZP	VR10			; get possible whitespace character
	BEQ	_PROGRAM_GET_ARG_NONE	; if null character then return false
	JSR	ISSPACE			; test if whitespace
	CMP.I	FALSE
	BEQ	_PROGRAM_GET_ARG_WORD	; if not whitespace then this is the start of the next argument
	JSR	INC10			; increment pointer to next character
	BRA	_PROGRAM_GET_ARG_TRIM	; loop
>_PROGRAM_GET_ARG_WORD
	LDA.ZP	VR10			; get possible character
	BEQ	_PROGRAM_GET_ARG_DONE	; if null character then done searching
	JSR	ISSPACE			; test if this character is a space
	CMP.I	TRUE
	BEQ	_PROGRAM_GET_ARG_DONE	; done searching if space character is found
	INC.Z	VR11			; add 1 to NL
	JSR	INC10			; increment pointer to next character
	BRA	_PROGRAM_GET_ARG_WORD	; loop
>_PROGRAM_GET_ARG_DONE
	SEC				; subtract NL from current character pointer to set it to the beginning of argument and set NA
	LDA.Z	VR10
	SBC.Z	VR11
	STA.Z	VR10
	LDA.Z	VR10 1
	SBC.I	0
	STA.Z	VR10 1
	LDA.I	TRUE			; load true value
	RTS				; return
>_PROGRAM_GET_ARG_NONE
	LDA.I	FALSE			; load false value
	RTS				; return
