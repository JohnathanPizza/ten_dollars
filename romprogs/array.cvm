>ROM_PROGRAM_START
$SHELL_START
$FM_START

>ROM_PROGRAM_LENGTH
$SHELL_END - SHELL_START
$FM_END - FM_START

>ROM_PROGRAM_ADJUST
$SHELL_ADJUST
$FM_ADJUST

>SHELL_NAME
"shell\0
>FM_NAME
"fm\0

>ROM_PROGRAM_NAME
$SHELL_NAME
$FM_NAME

=ROM_PROGRAM_COUNT	2

=ROM_SHELL_ID		0
=ROM_FM_ID		1

; vr0 name
; a number
>ROM_PROGRAM_GET
	PHX				; store X
	LDA.Z	VR1			; store VR1
	PHA
	LDA.Z	VR1 1
	PHA
	LDX.I	0			; set X to 0
>_ROM_PROGRAM_GET_LOOP
	LDA.X	ROM_PROGRAM_NAME	; load pointer to program name in VR1
	STA.Z	VR1
	LDA.X	ROM_PROGRAM_NAME 1
	STA.Z	VR1 1
	JSR	STRCMP			; compare given string to program name
	CMP.I	0			; test if equal
	BEQ	_ROM_PROGRAM_GET_SUCCESS	; return correct rom ID if equal
	INX				; inc X
	INX				; inc X again for pointer stride
	CPX.I	ROM_PROGRAM_COUNT * 2	; test if done
	BNE	_ROM_PROGRAM_GET_LOOP	; loop if not
	; no match found, return 0XFF
	PLA				; restore VR1
	STA.Z	VR1 1
	PLA
	STA.Z	VR1
	PLX				; restore X
	LDA.I	0XFF			; load fail value
	RTS				; return
>_ROM_PROGRAM_GET_SUCCESS
	PLA				; restore VR1
	STA.Z	VR1 1
	PLA
	STA.Z	VR1
	TXA				; move id*2 to A
	LSR				; set A to id
	PLX				; restore X
	RTS				; return
