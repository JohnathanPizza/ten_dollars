; this file has information about ROM programs like start address and code length as well as a function for turning program names into IDs

; array of pointers to the start of ROM program code

>ROM_PROGRAM_START_PTRS
$SHELL_START
$FM_START

;==========

; array of ROM program code lengths

>ROM_PROGRAM_LENGTHS
$SHELL_END - SHELL_START
$FM_END - FM_START

;==========

; array of pointers to ROM program adjustment arrays

>ROM_PROGRAM_ADJUST_PTRS
$SHELL_ADJUST
$FM_ADJUST

;==========

; default names for each ROM program

>SHELL_NAME
"shell\0
>FM_NAME
"fm\0

;==========

; array of pointers to ROM program default names

>ROM_PROGRAM_NAME_STRS
$SHELL_NAME
$FM_NAME

;==========

; IDs for each ROM program
; programs may just use these codes instead of going through ROM_PROGRAM_GET with a string

=ROM_SHELL_ID		0
=ROM_FM_ID		1

=ROM_PROGRAM_COUNT	2	; total number of ROM programs

;==========

; ROM_PROGRAM_GET
; P --- VR0: pointer to program name string S
; R --- A: ROM program ID R
; returns in R the ROM program ID of program with default name at S
; if no default name matches S, R = 0xFF

>ROM_PROGRAM_GET
	PHX				; store X
	LDA.Z	VR1			; store VR1
	PHA
	LDA.Z	VR1 1
	PHA
	LDX.I	0			; set X to 0 for program ID loop counter
>_ROM_PROGRAM_GET_LOOP
	LDA.X	ROM_PROGRAM_NAME_STRS	; load pointer to program name in VR1
	STA.Z	VR1
	LDA.X	ROM_PROGRAM_NAME_STRS 1
	STA.Z	VR1 1
	JSR	STRCMP			; compare S to program name
	CMP.I	0			; test if equal
	BEQ	_ROM_PROGRAM_GET_SUCCESS	; return correct ROM ID if equal
	INX				; X += 2 to get next pointer in array
	INX
	CPX.I	ROM_PROGRAM_COUNT * 2	; test if done
	BNE	_ROM_PROGRAM_GET_LOOP	; loop if not
	; no match found, return 0XFF
	PLA				; restore VR1
	STA.Z	VR1 1
	PLA
	STA.Z	VR1
	PLX				; restore X
	LDA.I	0XFF			; load fail value
	RTS				; return
>_ROM_PROGRAM_GET_SUCCESS
	PLA				; restore VR1
	STA.Z	VR1 1
	PLA
	STA.Z	VR1
	TXA				; move ROM ID * 2 to A
	LSR				; / 2 to get ROM ID
	PLX				; restore X
	RTS				; return
