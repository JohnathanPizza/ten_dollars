; entrypoint in intitialization code when the computer is turned on or reset

@0X8000
>START
	; hardware initialization
	
	; setting stack pointer
	LDX.I	0XFF	; load stack pointer default value
	TXS		; set stack pointer to 0x1FF

	; turning on hardware modules
	STA	HW_ENABLE_ADDR HW_SRAM HW_VIA	; enable the SRAM and VIA
	LDA.I	HW_SRAM		; load the value of the SRAM toggle (not VIA, it is turned off soon)
	STA	HW_STATUS	; store into status to track it

	; setting register values in the VIA
	LDA.I	0B11000101	; initial value for the PCR
	STA	VIA_PCR		; update PCR
	STZ	VIA_READ_PORT_DIR	; set the reading port to all input
	STZ	VIA_WRITE_PORT		; preset the write port to output 0
	LDA.I	0XFF			; load value to set write port to all output
	STA	VIA_WRITE_PORT_DIR	; set write port to all output
	LDA.I	0B00000000
	STA	VIA_ACR
	STA	HW_ENABLE_ADDR HW_SRAM	; disable the VIA now

	; initialize RAM variables
	STZ	IO_WRITE_BUFFER_HEAD
	STZ	IO_WRITE_BUFFER_TAIL
	STZ	IO_WRITE_LEN
	STZ	IO_WRITE_LEN 1
	STZ	IO_WRITE_STATUS
	STZ	IO_READ_IDX
	STZ	IO_READ_STATUS
	STZ	IO_KEYBOARD_SHIFT
	STZ	IO_KEYBOARD_FLAGS
	
	; testing io
	CLI

	LDA.I	TEST_STR
	STA.Z	VR0
	LDA.I	TEST_STR > 8
	STA.Z	VR0 1
	JSR	PRINTS

	JSR	STRLEN
	LDA.Z	VR11
	JSR	PRINTB
	
	LDA.I	ASCII_L
	JSR	PRINTC
	LDA.I	ASCII_O
	JSR	PRINTC
	LDA.I	ASCII_L
	JSR	PRINTC
	LDA.I	ASCII_LF
	JSR	PRINTC

	; testing math
	LDA.I	0X180
	STA.Z	VR6
	LDA.I	0X180 > 8
	STA.Z	VR6 1

	LDA.I	0X488A
	STA.Z	VR10
	LDA.I	0X488A > 8
	STA.Z	VR10 1

	LDX.I	VRI_6
	LDY.I	VRI_10
	JSR	ADD16

	LDA.Z	VR6 1
	JSR	PRINTB
	LDA.Z	VR6
	JSR	PRINTB

	LDA.I	ASCII_LF
	JSR	PRINTC

	LDA.I	0X180
	STA.Z	VR6
	LDA.I	0X180 > 8
	STA.Z	VR6 1

	LDX.I	VRI_6
	LDY.I	VRI_10
	JSR	SUB16
	
	LDA.Z	VR6 1
	JSR	PRINTB
	LDA.Z	VR6
	JSR	PRINTB

	LDA.I	ASCII_LF
	JSR	PRINTC

	LDX.I	VRI_10
	JSR	INC16
	
	LDA.Z	VR10 1
	JSR	PRINTB
	LDA.Z	VR10
	JSR	PRINTB

	LDA.I	ASCII_LF
	JSR	PRINTC

	LDX.I	VRI_10
	JSR	DEC16
	JSR	DEC16
	
	LDA.Z	VR10 1
	JSR	PRINTB
	LDA.Z	VR10
	JSR	PRINTB

	LDA.I	ASCII_LF
	JSR	PRINTC

	LDA.I	BC_READ
	STA	VR4
	BRK

	JSR	READ_WAIT

	LDA.I	IO_READ_BUFFER
	STA	VR0
	LDA.I	IO_READ_BUFFER > 8
	STA	VR0 1
	JSR	PRINTS
	LDA.I	ASCII_LF
	JSR	PRINTC

>LOOP
	JMP LOOP

>TEST_STR
!ASCII_ESC
!ASCII_AT
"whats up buddy\n\0

>START_END

>READ_WAIT
	LDA	IO_READ_STATUS
	BNE	READ_WAIT
	RTS
